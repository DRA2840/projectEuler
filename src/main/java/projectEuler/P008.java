package projectEuler;

/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.
 * 
 *   73167176531330624919225119674426574742355349194934
 *   96983520312774506326239578318016984801869478851843
 *   85861560789112949495459501737958331952853208805511
 *   12540698747158523863050715693290963295227443043557
 *   66896648950445244523161731856403098711121722383113
 *   62229893423380308135336276614282806444486645238749
 *   30358907296290491560440772390713810515859307960866
 *   70172427121883998797908792274921901699720888093776
 *   65727333001053367881220235421809751254540594752243
 *   52584907711670556013604839586446706324415722155397
 *   53697817977846174064955149290862569321978468622482
 *   83972241375657056057490261407972968652414535100474
 *   82166370484403199890008895243450658541227588666881
 *   16427171479924442928230863465674813919123162824586
 *   17866458359124566529476545682848912883142607690042
 *   24219022671055626321111109370544217506941658960408
 *   07198403850962455444362981230987879927244284909188
 *   84580156166097919133875499200524063689912560717606
 *   05886116467109405077541002256983155200055935729725
 *   71636269561882670428252483600823257530420752963450
 *   
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
 * What is the value of this product?
 * 
 * @author <img src="https://avatars2.githubusercontent.com/u/3778188?v=2&s=30" width="30" height="30" /> <a href="https://github.com/DRA2840" target="_blank"> Diego Azevedo (DRA2840) </a>
 *
 */
public class P008 {
	
	private static final String ONE_THOUSAND_DIGIT_NUMBER = 
			  "73167176531330624919225119674426574742355349194934"
			+ "96983520312774506326239578318016984801869478851843"
			+ "85861560789112949495459501737958331952853208805511"
			+ "12540698747158523863050715693290963295227443043557"
			+ "66896648950445244523161731856403098711121722383113"
			+ "62229893423380308135336276614282806444486645238749"
			+ "30358907296290491560440772390713810515859307960866"
			+ "70172427121883998797908792274921901699720888093776"
			+ "65727333001053367881220235421809751254540594752243"
			+ "52584907711670556013604839586446706324415722155397"
			+ "53697817977846174064955149290862569321978468622482"
			+ "83972241375657056057490261407972968652414535100474"
			+ "82166370484403199890008895243450658541227588666881"
			+ "16427171479924442928230863465674813919123162824586"
			+ "17866458359124566529476545682848912883142607690042"
			+ "24219022671055626321111109370544217506941658960408"
			+ "07198403850962455444362981230987879927244284909188"
			+ "84580156166097919133875499200524063689912560717606"
			+ "05886116467109405077541002256983155200055935729725"
			+ "71636269561882670428252483600823257530420752963450";
	
	private static String[] array;
	
	public static void main(String[] args) {
		System.out.println(calculateAnswer());
	}
	
	/**
	 * Calculates answer
	 * @return answer
	 */
	public static String calculateAnswer(){
		splitter();
		return String.valueOf(greatestProduct(0, 13));
	}
	
	/**
	 * Splits the string into a String-with-only-one-char array
	 */
	private static void splitter(){
		array = ONE_THOUSAND_DIGIT_NUMBER.split("");
	}
	
	//TODO: Rip-off the auxiliary variable. use Max(a,b)
	/**
	 * Finds the greatest product between 'N' consecutive digits in that number
	 * @param first position of first digit in the array. Should start with 0
	 * @param offset 'N'
	 * @return The greatest product between 'N' consecutive digits
	 */
	private static long greatestProduct(int first, int offset){
		return (first + offset == array.length)? -1: P000.max(recursiveProduct(first, offset), greatestProduct(first+1, offset));
	}
	
	// Why use a FOR if you can write a recursive function that does the same thing?
	private static long recursiveProduct(int first, int offset){
		return ((offset == 0)? 1 :Integer.valueOf(array[first])*recursiveProduct(first +1, offset-1)) ;
	}
	
}
