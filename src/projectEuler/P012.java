package projectEuler;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers: 
 *    1: 1
 *    3: 1,3 
 *    6: 1,2,3,6
 *    10: 1,2,5,10
 *    15: 1,3,5,15
 *    21: 1,3,7,21
 *    28: 1,2,4,7,14,28
 *    
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * @author <img src="https://avatars2.githubusercontent.com/u/3778188?v=2&s=30" width="30" height="30" /> <a href="https://github.com/DRA2840" target="_blank"> Diego Azevedo (DRA2840) </a>
 *
 */
public class P012 {
	
	public static void main(String[] args) {
		System.out.println(calculateAnswer());
		System.out.println(firstTriangleNumberToHaveXDivisors(1,2,5));
	}
	/**
	 * Calculates answer
	 * @return answer
	 */
	public static long calculateAnswer(){
		return firstTriangleNumberToHaveXDivisorsNonRecursive(500);
	}
	
	/**
	 * Calculates the firts Triangle number to have x divisors. Non recursive approach
	 * @param numberOfDivisors x
	 * @return the first triangle number with at least x divisors.
	 */
	public static long firstTriangleNumberToHaveXDivisorsNonRecursive(int numberOfDivisors) {
		long numberToTest = 1;
		int aux = 2;
		while(P000.numerOfDivisors(numberToTest) < numberOfDivisors){
			numberToTest +=aux;
			++aux;
		}
		return numberToTest;
	}
	
	/**
	 * Calculates the firts Triangle number to have x divisors.
	 * @param numberToTest auxiliary variable. Should start with 1
	 * @param aux another auxiliary variable. Should start with 2;
	 * @param numberOfDivisors x
	 * @return the first triangle number with at least x divisors.
	 */
	private static long firstTriangleNumberToHaveXDivisors(long numberToTest, int aux, int numberOfDivisors){
		if(P000.numerOfDivisors(numberToTest)< numberOfDivisors){
			return firstTriangleNumberToHaveXDivisors(numberToTest + aux, ++aux, numberOfDivisors);
		}
		
		return numberToTest;
	}

}
